# Jiang Wentao
# 2013011717

# Execution begins at address 0
        .pos 0
        irmovq stack, %rsp      # set up stack pointer
        call main               # execute main program
        halt

# Sample linked list
.align 8
ele1:   
        .quad 0x00a
        .quad ele2
ele2:   
        .quad 0x0b0
        .quad ele3
ele3:   
        .quad 0xc00
        .quad 0


main:
        irmovq ele1, %rdi
        call rsum_list           # rsum_list(ele1)
        ret


# long rsum_list(list_ptr ls)
rsum_list:
	irmovq $0x8,%r8
	subq %r8, %rsp		
	pushq %rbx		# save %rbx
        rrmovq %rdi,%rsi        # %rsi = ls
        xorq %rax,%rax          # sum = 0
        andq %rsi,%rsi          # set CC
        jmp test                # goto test
recur:
        mrmovq (%rsi),%rbx	# %rbx = ls->next
	mrmovq 8(%rsi),%rdi
	call rsum_list		# rsum_list(ls->next)
	addq %rbx, %rax		# %rax = val + rest
	popq %rbx		# restore %rbx
	addq %r8, %rsp
	ret
test:
        jne recur               # stop when 0
	popq %rbx		# restore %rbx
	addq %r8, %rsp
        ret




# Stack starts here and grows to lower addresses
        .pos 0x300
stack:

