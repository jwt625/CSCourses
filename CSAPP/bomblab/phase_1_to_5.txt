jwt625@ubuntu:~$ ssh -p 2210 2013011717@diablo.pacman-thu.org
2013011717@diablo.pacman-thu.org's password: 
Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-64-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Thu Apr  6 20:30:24 2017 from 172.23.0.1
2013011717@cereal:~$ ls
bomb45  bomb45.tar  tmp
2013011717@cereal:~$ cd bomb45
2013011717@cereal:~/bomb45$ ls
bomb  bomb.c  README
2013011717@cereal:~/bomb45$ gdb bomb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) break explode_bomb
Breakpoint 1 at 0x401712
(gdb) help break
Set breakpoint at specified location.
break [PROBE_MODIFIER] [LOCATION] [thread THREADNUM] [if CONDITION]
PROBE_MODIFIER shall be present if the command is to be placed in a
probe point.  Accepted values are `-probe' (for a generic, automatically
guessed probe type), `-probe-stap' (for a SystemTap probe) or 
`-probe-dtrace' (for a DTrace probe).
LOCATION may be a linespec, address, or explicit location as described
below.

With no LOCATION, uses current execution address of the selected
stack frame.  This is useful for breaking on return to a stack frame.

THREADNUM is the number from "info threads".
CONDITION is a boolean expression.

Linespecs are colon-separated lists of location parameters, such as
source filename, function name, label name, and line number.
Example: To specify the start of a label named "the_top" in the
function "fact" in the file "factorial.c", use
"factorial.c:fact:the_top".

Address locations begin with "*" and specify an exact address in the
program.  Example: To specify the fourth byte past the start function
"main", use "*main + 4".

Explicit locations are similar to linespecs but use an option/argument
syntax to specify location parameters.
Example: To specify the start of the label named "the_top" in the
function "fact" in the file "factorial.c", use "-source factorial.c
-function fact -label the_top".

Multiple breakpoints at one place are permitted, and useful if their
conditions are different.

Do "help breakpoints" for info on other commands dealing with breakpoints.
(gdb) break read_line
Breakpoint 2 at 0x401787
(gdb) run
Starting program: /home/2013011717/bomb45/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 2, 0x0000000000401787 in read_line ()
(gdb) disas
Dump of assembler code for function read_line:
=> 0x0000000000401787 <+0>:	sub    $0x8,%rsp
   0x000000000040178b <+4>:	mov    $0x0,%eax
   0x0000000000401790 <+9>:	callq  0x4015c7 <skip>
   0x0000000000401795 <+14>:	test   %rax,%rax
   0x0000000000401798 <+17>:	jne    0x401808 <read_line+129>
   0x000000000040179a <+19>:	mov    0x202fef(%rip),%rax        # 0x604790 <stdin@@GLIBC_2.2.5>
   0x00000000004017a1 <+26>:	cmp    %rax,0x203008(%rip)        # 0x6047b0 <infile>
   0x00000000004017a8 <+33>:	jne    0x4017be <read_line+55>
   0x00000000004017aa <+35>:	mov    $0x402a13,%edi
   0x00000000004017af <+40>:	callq  0x400b70 <puts@plt>
   0x00000000004017b4 <+45>:	mov    $0x8,%edi
   0x00000000004017b9 <+50>:	callq  0x400c80 <exit@plt>
   0x00000000004017be <+55>:	mov    $0x402a31,%edi
   0x00000000004017c3 <+60>:	callq  0x400b30 <getenv@plt>
   0x00000000004017c8 <+65>:	test   %rax,%rax
   0x00000000004017cb <+68>:	je     0x4017d7 <read_line+80>
   0x00000000004017cd <+70>:	mov    $0x0,%edi
   0x00000000004017d2 <+75>:	callq  0x400c80 <exit@plt>
   0x00000000004017d7 <+80>:	mov    0x202fb2(%rip),%rax        # 0x604790 <stdin@@GLIBC_2.2.5>
   0x00000000004017de <+87>:	mov    %rax,0x202fcb(%rip)        # 0x6047b0 <infile>
   0x00000000004017e5 <+94>:	mov    $0x0,%eax
   0x00000000004017ea <+99>:	callq  0x4015c7 <skip>
   0x00000000004017ef <+104>:	test   %rax,%rax
   0x00000000004017f2 <+107>:	jne    0x401808 <read_line+129>
   0x00000000004017f4 <+109>:	mov    $0x402a13,%edi
   0x00000000004017f9 <+114>:	callq  0x400b70 <puts@plt>
   0x00000000004017fe <+119>:	mov    $0x0,%edi
   0x0000000000401803 <+124>:	callq  0x400c80 <exit@plt>
   0x0000000000401808 <+129>:	mov    0x202f9e(%rip),%esi        # 0x6047ac <num_input_strings>
   0x000000000040180e <+135>:	movslq %esi,%rax
   0x0000000000401811 <+138>:	lea    (%rax,%rax,4),%rdx
   0x0000000000401815 <+142>:	shl    $0x4,%rdx
   0x0000000000401819 <+146>:	add    $0x6047c0,%rdx
   0x0000000000401820 <+153>:	mov    $0x0,%eax
   0x0000000000401825 <+158>:	mov    $0xffffffffffffffff,%rcx
   0x000000000040182c <+165>:	mov    %rdx,%rdi
   0x000000000040182f <+168>:	repnz scas %es:(%rdi),%al
   0x0000000000401831 <+170>:	not    %rcx
---Type <return> to continue, or q <return> to quit---
   0x0000000000401834 <+173>:	sub    $0x1,%rcx
   0x0000000000401838 <+177>:	cmp    $0x4e,%ecx
   0x000000000040183b <+180>:	jle    0x401883 <read_line+252>
   0x000000000040183d <+182>:	mov    $0x402a3c,%edi
   0x0000000000401842 <+187>:	callq  0x400b70 <puts@plt>
   0x0000000000401847 <+192>:	mov    0x202f5f(%rip),%eax        # 0x6047ac <num_input_strings>
   0x000000000040184d <+198>:	lea    0x1(%rax),%edx
   0x0000000000401850 <+201>:	mov    %edx,0x202f56(%rip)        # 0x6047ac <num_input_strings>
   0x0000000000401856 <+207>:	cltq   
   0x0000000000401858 <+209>:	imul   $0x50,%rax,%rax
   0x000000000040185c <+213>:	movabs $0x636e7572742a2a2a,%rdi
   0x0000000000401866 <+223>:	mov    %rdi,0x6047c0(%rax)
   0x000000000040186d <+230>:	movabs $0x2a2a2a64657461,%rdi
   0x0000000000401877 <+240>:	mov    %rdi,0x6047c8(%rax)
   0x000000000040187e <+247>:	callq  0x401712 <explode_bomb>
   0x0000000000401883 <+252>:	sub    $0x1,%ecx
   0x0000000000401886 <+255>:	movslq %ecx,%rcx
   0x0000000000401889 <+258>:	movslq %esi,%rax
   0x000000000040188c <+261>:	lea    (%rax,%rax,4),%rax
   0x0000000000401890 <+265>:	shl    $0x4,%rax
   0x0000000000401894 <+269>:	movb   $0x0,0x6047c0(%rcx,%rax,1)
   0x000000000040189c <+277>:	lea    0x1(%rsi),%eax
   0x000000000040189f <+280>:	mov    %eax,0x202f07(%rip)        # 0x6047ac <num_input_strings>
   0x00000000004018a5 <+286>:	mov    %rdx,%rax
   0x00000000004018a8 <+289>:	add    $0x8,%rsp
   0x00000000004018ac <+293>:	retq   
End of assembler dump.
(gdb) break string_not_equal
Function "string_not_equal" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) break strings_not_equal
Breakpoint 3 at 0x40143e
(gdb) continue
Continuing.
asd

Breakpoint 3, 0x000000000040143e in strings_not_equal ()
(gdb) disas
Dump of assembler code for function strings_not_equal:
=> 0x000000000040143e <+0>:	push   %r12
   0x0000000000401440 <+2>:	push   %rbp
   0x0000000000401441 <+3>:	push   %rbx
   0x0000000000401442 <+4>:	mov    %rdi,%rbx
   0x0000000000401445 <+7>:	mov    %rsi,%rbp
   0x0000000000401448 <+10>:	callq  0x401420 <string_length>
   0x000000000040144d <+15>:	mov    %eax,%r12d
   0x0000000000401450 <+18>:	mov    %rbp,%rdi
   0x0000000000401453 <+21>:	callq  0x401420 <string_length>
   0x0000000000401458 <+26>:	mov    $0x1,%edx
   0x000000000040145d <+31>:	cmp    %eax,%r12d
   0x0000000000401460 <+34>:	jne    0x40149e <strings_not_equal+96>
   0x0000000000401462 <+36>:	movzbl (%rbx),%eax
   0x0000000000401465 <+39>:	test   %al,%al
   0x0000000000401467 <+41>:	je     0x40148b <strings_not_equal+77>
   0x0000000000401469 <+43>:	cmp    0x0(%rbp),%al
   0x000000000040146c <+46>:	je     0x401475 <strings_not_equal+55>
   0x000000000040146e <+48>:	jmp    0x401492 <strings_not_equal+84>
   0x0000000000401470 <+50>:	cmp    0x0(%rbp),%al
   0x0000000000401473 <+53>:	jne    0x401499 <strings_not_equal+91>
   0x0000000000401475 <+55>:	add    $0x1,%rbx
   0x0000000000401479 <+59>:	add    $0x1,%rbp
   0x000000000040147d <+63>:	movzbl (%rbx),%eax
   0x0000000000401480 <+66>:	test   %al,%al
   0x0000000000401482 <+68>:	jne    0x401470 <strings_not_equal+50>
   0x0000000000401484 <+70>:	mov    $0x0,%edx
   0x0000000000401489 <+75>:	jmp    0x40149e <strings_not_equal+96>
   0x000000000040148b <+77>:	mov    $0x0,%edx
   0x0000000000401490 <+82>:	jmp    0x40149e <strings_not_equal+96>
   0x0000000000401492 <+84>:	mov    $0x1,%edx
   0x0000000000401497 <+89>:	jmp    0x40149e <strings_not_equal+96>
   0x0000000000401499 <+91>:	mov    $0x1,%edx
   0x000000000040149e <+96>:	mov    %edx,%eax
   0x00000000004014a0 <+98>:	pop    %rbx
   0x00000000004014a1 <+99>:	pop    %rbp
   0x00000000004014a2 <+100>:	pop    %r12
   0x00000000004014a4 <+102>:	retq   
End of assembler dump.
(gdb) disas phase_1
Dump of assembler code for function phase_1:
   0x0000000000400f2d <+0>:	sub    $0x8,%rsp
   0x0000000000400f31 <+4>:	mov    $0x4026d0,%esi
   0x0000000000400f36 <+9>:	callq  0x40143e <strings_not_equal>
   0x0000000000400f3b <+14>:	test   %eax,%eax
   0x0000000000400f3d <+16>:	je     0x400f44 <phase_1+23>
   0x0000000000400f3f <+18>:	callq  0x401712 <explode_bomb>
   0x0000000000400f44 <+23>:	add    $0x8,%rsp
   0x0000000000400f48 <+27>:	retq   
End of assembler dump.
(gdb) print $0X4026d0
$1 = void
(gdb) print $0x4026d0
$2 = void
(gdb) print *(char*)0x4026d0
$3 = 73 'I'
(gdb) print *(char*)0x4026d1
$4 = 32 ' '
(gdb) print *(char*)0x4026d2
$5 = 97 'a'
(gdb) print *(char*)0x4026d3
$6 = 109 'm'
(gdb) print *(char*)0x4026d4
$7 = 32 ' '
(gdb) print *(char*)0x4026d5
$8 = 116 't'
(gdb) print *(char*)0x4026d6
$9 = 104 'h'
(gdb) print *(char*)0x4026d7
$10 = 101 'e'
(gdb) print *(char*)0x4026d8
$11 = 32 ' '
(gdb) print *(char*)0x4026d9
$12 = 109 'm'
(gdb) print *(char*)0x4026da
$13 = 97 'a'
(gdb) print *(char*)0x4026db
$14 = 121 'y'
(gdb) print *(char*)0x4026dc
$15 = 111 'o'
(gdb) print *(char*)0x4026dd
$16 = 114 'r'
(gdb) print *(char*)0x4026de
$17 = 46 '.'
(gdb) print *(char*)0x4026df
$18 = 32 ' '
(gdb) print *(char*)0x4026e0
$19 = 73 'I'
(gdb) print *(char*)0x4026e1
$20 = 32 ' '
(gdb) print *(char*)0x4026e2
$21 = 99 'c'
(gdb) print *(char*)0x4026e3
$22 = 97 'a'
(gdb) print *(char*)0x4026e4
$23 = 110 'n'
(gdb) print *(char*)0x4026e5
$24 = 32 ' '
(gdb) print *(char*)0x4026e6
$25 = 100 'd'
(gdb) print *(char*)0x4026e7
$26 = 111 'o'
(gdb) print *(char*)0x4026e8
$27 = 32 ' '
(gdb) print *(char*)0x4026e9
$28 = 97 'a'
(gdb) print *(char*)0x4026ea
$29 = 110 'n'
(gdb) print *(char*)0x4026eb
$30 = 121 'y'
(gdb) print *(char*)0x4026ec
$31 = 116 't'
(gdb) print *(char*)0x4026ed
$32 = 104 'h'
(gdb) print *(char*)0x4026ee
$33 = 105 'i'
(gdb) print *(char*)0x4026ef
$34 = 110 'n'
(gdb) print *(char*)0x4026f0
$35 = 103 'g'
(gdb) print *(char*)0x4026f1
$36 = 32 ' '
(gdb) print *(char*)0x4026f2
$37 = 73 'I'
(gdb) print *(char*)0x4026f3
$38 = 32 ' '
(gdb) print *(char*)0x4026f4
$39 = 119 'w'
(gdb) print *(char*)0x4026f5
$40 = 97 'a'
(gdb) print *(char*)0x4026f6
$41 = 110 'n'
(gdb) print *(char*)0x4026f7
$42 = 116 't'
(gdb) print *(char*)0x4026f8
$43 = 46 '.'
(gdb) print *(char*)0x4026f9
$44 = 0 '\000'
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) quit
2013011717@cereal:~/bomb45$ vi keys.txt
2013011717@cereal:~/bomb45$ vi keys.txt
2013011717@cereal:~/bomb45$ vi keys.txt
2013011717@cereal:~/bomb45$ vi keys.txt
2013011717@cereal:~/bomb45$ gdb bomb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) break explode_bomb
Breakpoint 1 at 0x401712
(gdb) break phase_1
Breakpoint 2 at 0x400f2d
(gdb) break phase_2
Breakpoint 3 at 0x400f49
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 2, 0x0000000000400f2d in phase_1 ()
(gdb) continue
Continuing.
Phase 1 defused. How about the next one?
asd

Breakpoint 3, 0x0000000000400f49 in phase_2 ()
(gdb) continue
Continuing.

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) quit
2013011717@cereal:~/bomb45$ gdb bomb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400f49 <+0>:	push   %rbp
   0x0000000000400f4a <+1>:	push   %rbx
   0x0000000000400f4b <+2>:	sub    $0x28,%rsp
   0x0000000000400f4f <+6>:	mov    %fs:0x28,%rax
   0x0000000000400f58 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400f5d <+20>:	xor    %eax,%eax
   0x0000000000400f5f <+22>:	mov    %rsp,%rsi
   0x0000000000400f62 <+25>:	callq  0x401748 <read_six_numbers>
   0x0000000000400f67 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400f6b <+34>:	je     0x400f72 <phase_2+41>
   0x0000000000400f6d <+36>:	callq  0x401712 <explode_bomb>
   0x0000000000400f72 <+41>:	mov    %rsp,%rbx
   0x0000000000400f75 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400f7a <+49>:	mov    (%rbx),%eax
   0x0000000000400f7c <+51>:	add    %eax,%eax
   0x0000000000400f7e <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400f81 <+56>:	je     0x400f88 <phase_2+63>
   0x0000000000400f83 <+58>:	callq  0x401712 <explode_bomb>
   0x0000000000400f88 <+63>:	add    $0x4,%rbx
   0x0000000000400f8c <+67>:	cmp    %rbp,%rbx
   0x0000000000400f8f <+70>:	jne    0x400f7a <phase_2+49>
   0x0000000000400f91 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400f96 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400f9f <+86>:	je     0x400fa6 <phase_2+93>
   0x0000000000400fa1 <+88>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000400fa6 <+93>:	add    $0x28,%rsp
   0x0000000000400faa <+97>:	pop    %rbx
   0x0000000000400fab <+98>:	pop    %rbp
   0x0000000000400fac <+99>:	retq   
End of assembler dump.
(gdb) break
No default breakpoint address now.
(gdb) break explode_bomb
Breakpoint 1 at 0x401712
(gdb) break
No default breakpoint address now.
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) break * 0x400f6b
Breakpoint 2 at 0x400f6b
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x0000000000400f6b <phase_2+34>
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 2, 0x0000000000400f6b in phase_2 ()
(gdb) print *(int*) $rsp
$1 = 4
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x0000000000400f6b <phase_2+34>
	breakpoint already hit 1 time
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400f49 <+0>:	push   %rbp
   0x0000000000400f4a <+1>:	push   %rbx
   0x0000000000400f4b <+2>:	sub    $0x28,%rsp
   0x0000000000400f4f <+6>:	mov    %fs:0x28,%rax
   0x0000000000400f58 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400f5d <+20>:	xor    %eax,%eax
   0x0000000000400f5f <+22>:	mov    %rsp,%rsi
   0x0000000000400f62 <+25>:	callq  0x401748 <read_six_numbers>
   0x0000000000400f67 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400f6b <+34>:	je     0x400f72 <phase_2+41>
   0x0000000000400f6d <+36>:	callq  0x401712 <explode_bomb>
   0x0000000000400f72 <+41>:	mov    %rsp,%rbx
   0x0000000000400f75 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400f7a <+49>:	mov    (%rbx),%eax
   0x0000000000400f7c <+51>:	add    %eax,%eax
   0x0000000000400f7e <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400f81 <+56>:	je     0x400f88 <phase_2+63>
   0x0000000000400f83 <+58>:	callq  0x401712 <explode_bomb>
   0x0000000000400f88 <+63>:	add    $0x4,%rbx
   0x0000000000400f8c <+67>:	cmp    %rbp,%rbx
   0x0000000000400f8f <+70>:	jne    0x400f7a <phase_2+49>
   0x0000000000400f91 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400f96 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400f9f <+86>:	je     0x400fa6 <phase_2+93>
   0x0000000000400fa1 <+88>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000400fa6 <+93>:	add    $0x28,%rsp
   0x0000000000400faa <+97>:	pop    %rbx
   0x0000000000400fab <+98>:	pop    %rbp
   0x0000000000400fac <+99>:	retq   
End of assembler dump.
(gdb) break *0x400f81
Breakpoint 3 at 0x400f81
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x0000000000400f6b <phase_2+34>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
(gdb) kill
The program is not being run.
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 2, 0x0000000000400f6b in phase_2 ()
(gdb) continue
Continuing.

Breakpoint 3, 0x0000000000400f81 in phase_2 ()
(gdb) print *(int*)$eax
Cannot access memory at address 0x2
(gdb) print $eax
$2 = 2
(gdb) print *(int*) (4+$rbx)
$3 = 3
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x0000000000400f6b <phase_2+34>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 1 time
(gdb) delete 2
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 1 time
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400f49 <+0>:	push   %rbp
   0x0000000000400f4a <+1>:	push   %rbx
   0x0000000000400f4b <+2>:	sub    $0x28,%rsp
   0x0000000000400f4f <+6>:	mov    %fs:0x28,%rax
   0x0000000000400f58 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400f5d <+20>:	xor    %eax,%eax
   0x0000000000400f5f <+22>:	mov    %rsp,%rsi
   0x0000000000400f62 <+25>:	callq  0x401748 <read_six_numbers>
   0x0000000000400f67 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400f6b <+34>:	je     0x400f72 <phase_2+41>
   0x0000000000400f6d <+36>:	callq  0x401712 <explode_bomb>
   0x0000000000400f72 <+41>:	mov    %rsp,%rbx
   0x0000000000400f75 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400f7a <+49>:	mov    (%rbx),%eax
   0x0000000000400f7c <+51>:	add    %eax,%eax
   0x0000000000400f7e <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400f81 <+56>:	je     0x400f88 <phase_2+63>
   0x0000000000400f83 <+58>:	callq  0x401712 <explode_bomb>
   0x0000000000400f88 <+63>:	add    $0x4,%rbx
   0x0000000000400f8c <+67>:	cmp    %rbp,%rbx
   0x0000000000400f8f <+70>:	jne    0x400f7a <phase_2+49>
   0x0000000000400f91 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400f96 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400f9f <+86>:	je     0x400fa6 <phase_2+93>
   0x0000000000400fa1 <+88>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000400fa6 <+93>:	add    $0x28,%rsp
   0x0000000000400faa <+97>:	pop    %rbx
   0x0000000000400fab <+98>:	pop    %rbp
   0x0000000000400fac <+99>:	retq   
End of assembler dump.
(gdb) kill
The program is not being run.
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 1 time
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 3, 0x0000000000400f81 in phase_2 ()
(gdb) print *(int*)($rsp)
$4 = 1
(gdb) print *(int*)($rsp+4)
$5 = 2
(gdb) print *(int*)($rsp+8)
$6 = 2
(gdb) print *(int*)($rsp+12)
$7 = 1
(gdb) print *(int*)($rsp+16)
$8 = 5
(gdb) print *(int*)($rsp+20)
$9 = 6
(gdb) print *(int*)($rsp+24)
$10 = 549573120
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 1 time
(gdb) print $eax
$11 = 2
(gdb) print *(int*) ($rbx+4)
$12 = 2
(gdb) continue
Continuing.

Breakpoint 3, 0x0000000000400f81 in phase_2 ()
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400f49 <+0>:	push   %rbp
   0x0000000000400f4a <+1>:	push   %rbx
   0x0000000000400f4b <+2>:	sub    $0x28,%rsp
   0x0000000000400f4f <+6>:	mov    %fs:0x28,%rax
   0x0000000000400f58 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400f5d <+20>:	xor    %eax,%eax
   0x0000000000400f5f <+22>:	mov    %rsp,%rsi
   0x0000000000400f62 <+25>:	callq  0x401748 <read_six_numbers>
   0x0000000000400f67 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400f6b <+34>:	je     0x400f72 <phase_2+41>
   0x0000000000400f6d <+36>:	callq  0x401712 <explode_bomb>
   0x0000000000400f72 <+41>:	mov    %rsp,%rbx
   0x0000000000400f75 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400f7a <+49>:	mov    (%rbx),%eax
   0x0000000000400f7c <+51>:	add    %eax,%eax
   0x0000000000400f7e <+53>:	cmp    %eax,0x4(%rbx)
=> 0x0000000000400f81 <+56>:	je     0x400f88 <phase_2+63>
   0x0000000000400f83 <+58>:	callq  0x401712 <explode_bomb>
   0x0000000000400f88 <+63>:	add    $0x4,%rbx
   0x0000000000400f8c <+67>:	cmp    %rbp,%rbx
   0x0000000000400f8f <+70>:	jne    0x400f7a <phase_2+49>
   0x0000000000400f91 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400f96 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400f9f <+86>:	je     0x400fa6 <phase_2+93>
   0x0000000000400fa1 <+88>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000400fa6 <+93>:	add    $0x28,%rsp
   0x0000000000400faa <+97>:	pop    %rbx
   0x0000000000400fab <+98>:	pop    %rbp
   0x0000000000400fac <+99>:	retq   
End of assembler dump.
(gdb) continue
Continuing.

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 2 times
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) break explode_bomb
Breakpoint 4 at 0x401712
(gdb) break *0x400f81
Breakpoint 5 at 0x400f81
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$13 = 2
(gdb) print *(int*)($rbx+4)
$14 = 2
(gdb) break *0x400f88
Breakpoint 6 at 0x400f88
(gdb) continue
Continuing.

Breakpoint 6, 0x0000000000400f88 in phase_2 ()
(gdb) print $rbx
$15 = 140737488348320
(gdb) print /x $rbx
$16 = 0x7fffffffe4a0
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400f49 <+0>:	push   %rbp
   0x0000000000400f4a <+1>:	push   %rbx
   0x0000000000400f4b <+2>:	sub    $0x28,%rsp
   0x0000000000400f4f <+6>:	mov    %fs:0x28,%rax
   0x0000000000400f58 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400f5d <+20>:	xor    %eax,%eax
   0x0000000000400f5f <+22>:	mov    %rsp,%rsi
   0x0000000000400f62 <+25>:	callq  0x401748 <read_six_numbers>
   0x0000000000400f67 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400f6b <+34>:	je     0x400f72 <phase_2+41>
   0x0000000000400f6d <+36>:	callq  0x401712 <explode_bomb>
   0x0000000000400f72 <+41>:	mov    %rsp,%rbx
   0x0000000000400f75 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400f7a <+49>:	mov    (%rbx),%eax
   0x0000000000400f7c <+51>:	add    %eax,%eax
   0x0000000000400f7e <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400f81 <+56>:	je     0x400f88 <phase_2+63>
   0x0000000000400f83 <+58>:	callq  0x401712 <explode_bomb>
=> 0x0000000000400f88 <+63>:	add    $0x4,%rbx
   0x0000000000400f8c <+67>:	cmp    %rbp,%rbx
   0x0000000000400f8f <+70>:	jne    0x400f7a <phase_2+49>
   0x0000000000400f91 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400f96 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400f9f <+86>:	je     0x400fa6 <phase_2+93>
   0x0000000000400fa1 <+88>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000400fa6 <+93>:	add    $0x28,%rsp
   0x0000000000400faa <+97>:	pop    %rbx
   0x0000000000400fab <+98>:	pop    %rbp
   0x0000000000400fac <+99>:	retq   
End of assembler dump.
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$17 = 4
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
4       breakpoint     keep y   0x0000000000401712 <explode_bomb>
5       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 2 times
6       breakpoint     keep y   0x0000000000400f88 <phase_2+63>
	breakpoint already hit 1 time
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) delete 6
(gdb) break *0x400fac
Breakpoint 7 at 0x400fac
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
4       breakpoint     keep y   0x0000000000401712 <explode_bomb>
5       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 1 time
7       breakpoint     keep y   0x0000000000400fac <phase_2+99>
(gdb) print $eax
$18 = 2
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$19 = 4
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$20 = 8
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$21 = 4
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$22 = 8
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$23 = 16
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$24 = 8
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$25 = 16
(gdb) continue
Continuing.

Breakpoint 5, 0x0000000000400f81 in phase_2 ()
(gdb) print $eax
$26 = 32
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
4       breakpoint     keep y   0x0000000000401712 <explode_bomb>
5       breakpoint     keep y   0x0000000000400f81 <phase_2+56>
	breakpoint already hit 5 times
7       breakpoint     keep y   0x0000000000400fac <phase_2+99>
(gdb) delete 5
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?

Breakpoint 7, 0x0000000000400fac in phase_2 ()
(gdb) continue
Continuing.
That's number 2.  Keep going!
asd

Breakpoint 4, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) disas phase_3
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
   0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) 
(gdb) kill
The program is not being run.
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) break explode_bomb
Breakpoint 8 at 0x401712
(gdb) break *0x400fd5
Breakpoint 9 at 0x400fd5
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
asd

Breakpoint 9, 0x0000000000400fd5 in phase_3 ()
(gdb) print $esi
$27 = 4204326
(gdb) print x/$esi
No symbol "x" in current context.
(gdb) print /x $esi
$28 = 0x402726
(gdb) print *(char*) $esi
$29 = 37 '%'
(gdb) print *(char*) ($esi+1)
$30 = 100 'd'
(gdb) print *(char*) ($esi+2)
$31 = 32 ' '
(gdb) print *(char*) ($esi+3)
$32 = 37 '%'
(gdb) print *(char*) ($esi+4)
$33 = 99 'c'
(gdb) print *(char*) ($esi+5)
$34 = 32 ' '
(gdb) print *(char*) ($esi+6)
$35 = 37 '%'
(gdb) print *(char*) ($esi+7)
$36 = 100 'd'
(gdb) print *(char*) ($esi+8)
$37 = 0 '\000'
(gdb) print *(char*) ($edi)
$38 = 97 'a'
(gdb) print *(int*) ($edi)
$39 = 6583137
(gdb) print *(char*) ($edi)
$40 = 97 'a'
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
8       breakpoint     keep y   0x0000000000401712 <explode_bomb>
9       breakpoint     keep y   0x0000000000400fd5 <phase_3+40>
	breakpoint already hit 1 time
(gdb) disas phase_3
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
   0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
8       breakpoint     keep y   0x0000000000401712 <explode_bomb>
9       breakpoint     keep y   0x0000000000400fd5 <phase_3+40>
	breakpoint already hit 1 time
(gdb) delete 9
(gdb) break *0x400fda
Breakpoint 10 at 0x400fda
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 10, 0x0000000000400fda in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
=> 0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
   0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) print $eax
$41 = 3
(gdb) stepi
0x0000000000400fdd in phase_3 ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) break *0x400fd5
Breakpoint 11 at 0x400fd5
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
8       breakpoint     keep y   0x0000000000401712 <explode_bomb>
10      breakpoint     keep y   0x0000000000400fda <phase_3+45>
	breakpoint already hit 1 time
11      breakpoint     keep y   0x0000000000400fd5 <phase_3+40>
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 11, 0x0000000000400fd5 in phase_3 ()
(gdb) stepi
0x0000000000400c40 in __isoc99_sscanf@plt ()
(gdb) disas
Dump of assembler code for function __isoc99_sscanf@plt:
=> 0x0000000000400c40 <+0>:	jmpq   *0x20345a(%rip)        # 0x6040a0
   0x0000000000400c46 <+6>:	pushq  $0x11
   0x0000000000400c4b <+11>:	jmpq   0x400b20
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 11, 0x0000000000400fd5 in phase_3 ()
(gdb) continue
Continuing.

Breakpoint 10, 0x0000000000400fda in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
=> 0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) info frame
Stack level 0, frame at 0x7fffffffe4e0:
 rip = 0x400fda in phase_3; saved rip = 0x400ecd
 called by frame at 0x7fffffffe4f0
 Arglist at 0x7fffffffe4a8, args: 
 Locals at 0x7fffffffe4a8, Previous frame's sp is 0x7fffffffe4e0
 Saved registers:
  rip at 0x7fffffffe4d8
(gdb) info registers
rax            0x3	3
rbx            0x7fffffffe5c8	140737488348616
rcx            0x28	40
rdx            0x7fffffffe4c4	140737488348356
rsi            0x0	0
rdi            0x7fffffffde70	140737488346736
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x400fda	0x400fda <phase_3+45>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x0000000000400fdd in phase_3 ()
(gdb) stepi
0x0000000000400fe4 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
=> 0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) info registers
rax            0x3	3
rbx            0x7fffffffe5c8	140737488348616
rcx            0x28	40
rdx            0x7fffffffe4c4	140737488348356
rsi            0x0	0
rdi            0x7fffffffde70	140737488346736
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x400fe4	0x400fe4 <phase_3+55>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) print *(int*) ($rsp + 0x10)
$42 = 233
(gdb) print *(int*) ($rsp + 0x8)
$43 = 4199935
(gdb) print *(int*) ($rsp + 0x4)
$44 = 0
(gdb) print *(int*) ($rsp)
$45 = 4203760
(gdb) print *(int*) ($rsp + 4)
$46 = 0
(gdb) print *(int*) ($rsp + 8)
$47 = 4199935
(gdb) print *(int*) ($rsp + 12)
$48 = 1979711488
(gdb) print *(int*) ($rsp + 16)
$49 = 233
(gdb) print *(int*) ($rsp + 0x10)
$50 = 233
(gdb) print *(int*) ($rsp + 0x14)
$51 = 342
(gdb) stepi
0x0000000000400fe9 in phase_3 ()
(gdb) stepi
0x00000000004010eb in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
=> 0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
   0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 11, 0x0000000000400fd5 in phase_3 ()
(gdb) continue
Continuing.

Breakpoint 10, 0x0000000000400fda in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
=> 0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) stepi
0x0000000000400fdd in phase_3 ()
(gdb) stepi
0x0000000000400fe4 in phase_3 ()
(gdb) stepi
0x0000000000400fe9 in phase_3 ()
(gdb) stepi
0x0000000000400fef in phase_3 ()
(gdb) stepi
0x0000000000400ff3 in phase_3 ()
(gdb) info registers
rax            0x3	3
rbx            0x7fffffffe5c8	140737488348616
rcx            0x28	40
rdx            0x7fffffffe4c4	140737488348356
rsi            0x0	0
rdi            0x7fffffffde70	140737488346736
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x400ff3	0x400ff3 <phase_3+70>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
=> 0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) print 8*$rax
$52 = 24
(gdb) print 8*$rax+0x402740
$53 = 4204376
(gdb) stepi
0x0000000000401060 in phase_3 ()
(gdb) print *(int*) 8*$rax+0x402740
Cannot access memory at address 0x8
(gdb) print *(int*) (8*$rax+0x402740)
$54 = 4198496
(gdb) print /x *(int*) (8*$rax+0x402740)
$55 = 0x401060
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
=> 0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) print $eax
$56 = 3
(gdb) stepi
0x0000000000401065 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
=> 0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
   0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info preakpoints
Undefined info command: "preakpoints".  Try "help info".
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
8       breakpoint     keep y   0x0000000000401712 <explode_bomb>
10      breakpoint     keep y   0x0000000000400fda <phase_3+45>
	breakpoint already hit 1 time
11      breakpoint     keep y   0x0000000000400fd5 <phase_3+40>
	breakpoint already hit 1 time
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) break explode_bomb
Breakpoint 12 at 0x401712
(gdb) break *0x401065
Breakpoint 13 at 0x401065
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 13, 0x0000000000401065 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
=> 0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) info registers
rax            0x62	98
rbx            0x7fffffffe5c8	140737488348616
rcx            0x28	40
rdx            0x7fffffffe4c4	140737488348356
rsi            0x0	0
rdi            0x7fffffffde70	140737488346736
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401065	0x401065 <phase_3+184>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x000000000040106d in phase_3 ()
(gdb) stepi
0x00000000004010f5 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
=> 0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) stepi
0x00000000004010f9 in phase_3 ()
(gdb) stepi
0x00000000004010fb in phase_3 ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Breakpoint 13, 0x0000000000401065 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
=> 0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) stepi
0x000000000040106d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
=> 0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) stepi
0x00000000004010f5 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400fad <+0>:	sub    $0x28,%rsp
   0x0000000000400fb1 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400fba <+13>:	mov    %rax,0x18(%rsp)
   0x0000000000400fbf <+18>:	xor    %eax,%eax
   0x0000000000400fc1 <+20>:	lea    0x14(%rsp),%r8
   0x0000000000400fc6 <+25>:	lea    0xf(%rsp),%rcx
   0x0000000000400fcb <+30>:	lea    0x10(%rsp),%rdx
   0x0000000000400fd0 <+35>:	mov    $0x402726,%esi
   0x0000000000400fd5 <+40>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x0000000000400fda <+45>:	cmp    $0x2,%eax
   0x0000000000400fdd <+48>:	jg     0x400fe4 <phase_3+55>
   0x0000000000400fdf <+50>:	callq  0x401712 <explode_bomb>
   0x0000000000400fe4 <+55>:	cmpl   $0x7,0x10(%rsp)
   0x0000000000400fe9 <+60>:	ja     0x4010eb <phase_3+318>
   0x0000000000400fef <+66>:	mov    0x10(%rsp),%eax
   0x0000000000400ff3 <+70>:	jmpq   *0x402740(,%rax,8)
   0x0000000000400ffa <+77>:	mov    $0x72,%eax
   0x0000000000400fff <+82>:	cmpl   $0x210,0x14(%rsp)
   0x0000000000401007 <+90>:	je     0x4010f5 <phase_3+328>
   0x000000000040100d <+96>:	callq  0x401712 <explode_bomb>
   0x0000000000401012 <+101>:	mov    $0x72,%eax
   0x0000000000401017 <+106>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040101c <+111>:	mov    $0x75,%eax
   0x0000000000401021 <+116>:	cmpl   $0x3cf,0x14(%rsp)
   0x0000000000401029 <+124>:	je     0x4010f5 <phase_3+328>
   0x000000000040102f <+130>:	callq  0x401712 <explode_bomb>
   0x0000000000401034 <+135>:	mov    $0x75,%eax
   0x0000000000401039 <+140>:	jmpq   0x4010f5 <phase_3+328>
   0x000000000040103e <+145>:	mov    $0x6a,%eax
   0x0000000000401043 <+150>:	cmpl   $0x32f,0x14(%rsp)
   0x000000000040104b <+158>:	je     0x4010f5 <phase_3+328>
   0x0000000000401051 <+164>:	callq  0x401712 <explode_bomb>
   0x0000000000401056 <+169>:	mov    $0x6a,%eax
   0x000000000040105b <+174>:	jmpq   0x4010f5 <phase_3+328>
   0x0000000000401060 <+179>:	mov    $0x62,%eax
   0x0000000000401065 <+184>:	cmpl   $0x3db,0x14(%rsp)
   0x000000000040106d <+192>:	je     0x4010f5 <phase_3+328>
   0x0000000000401073 <+198>:	callq  0x401712 <explode_bomb>
   0x0000000000401078 <+203>:	mov    $0x62,%eax
   0x000000000040107d <+208>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040107f <+210>:	mov    $0x68,%eax
   0x0000000000401084 <+215>:	cmpl   $0x1c3,0x14(%rsp)
   0x000000000040108c <+223>:	je     0x4010f5 <phase_3+328>
   0x000000000040108e <+225>:	callq  0x401712 <explode_bomb>
   0x0000000000401093 <+230>:	mov    $0x68,%eax
   0x0000000000401098 <+235>:	jmp    0x4010f5 <phase_3+328>
   0x000000000040109a <+237>:	mov    $0x7a,%eax
   0x000000000040109f <+242>:	cmpl   $0x20f,0x14(%rsp)
   0x00000000004010a7 <+250>:	je     0x4010f5 <phase_3+328>
   0x00000000004010a9 <+252>:	callq  0x401712 <explode_bomb>
   0x00000000004010ae <+257>:	mov    $0x7a,%eax
---Type <return> to continue, or q <return> to quit---
   0x00000000004010b3 <+262>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010b5 <+264>:	mov    $0x63,%eax
   0x00000000004010ba <+269>:	cmpl   $0x2c6,0x14(%rsp)
   0x00000000004010c2 <+277>:	je     0x4010f5 <phase_3+328>
   0x00000000004010c4 <+279>:	callq  0x401712 <explode_bomb>
   0x00000000004010c9 <+284>:	mov    $0x63,%eax
   0x00000000004010ce <+289>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010d0 <+291>:	mov    $0x7a,%eax
   0x00000000004010d5 <+296>:	cmpl   $0x28a,0x14(%rsp)
   0x00000000004010dd <+304>:	je     0x4010f5 <phase_3+328>
   0x00000000004010df <+306>:	callq  0x401712 <explode_bomb>
   0x00000000004010e4 <+311>:	mov    $0x7a,%eax
   0x00000000004010e9 <+316>:	jmp    0x4010f5 <phase_3+328>
   0x00000000004010eb <+318>:	callq  0x401712 <explode_bomb>
   0x00000000004010f0 <+323>:	mov    $0x62,%eax
=> 0x00000000004010f5 <+328>:	cmp    0xf(%rsp),%al
   0x00000000004010f9 <+332>:	je     0x401100 <phase_3+339>
   0x00000000004010fb <+334>:	callq  0x401712 <explode_bomb>
   0x0000000000401100 <+339>:	mov    0x18(%rsp),%rax
   0x0000000000401105 <+344>:	xor    %fs:0x28,%rax
   0x000000000040110e <+353>:	je     0x401115 <phase_3+360>
   0x0000000000401110 <+355>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x0000000000401115 <+360>:	add    $0x28,%rsp
   0x0000000000401119 <+364>:	retq   
End of assembler dump.
(gdb) print $al
$57 = 98
(gdb) print *(int*) ($rsp+0xf)
$58 = 886
(gdb) print *(char*) ($rsp+0xf)
$59 = 118 'v'
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) delet
Delete all breakpoints? (y or n) y
(gdb) break explode_bomb
Breakpoint 14 at 0x401712
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
a

Breakpoint 14, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) quit
2013011717@cereal:~/bomb45$ ls
bomb  bomb.c  keys.txt  README
2013011717@cereal:~/bomb45$ clc
No command 'clc' found, but there are 19 similar ones
clc: command not found
2013011717@cereal:~/bomb45$ cls
No command 'cls' found, but there are 18 similar ones
cls: command not found
2013011717@cereal:~/bomb45$ pwd
/home/2013011717/bomb45
2013011717@cereal:~/bomb45$ ls
bomb  bomb.c  keys.txt  README
2013011717@cereal:~/bomb45$ gdb bomb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) 
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) break
No default breakpoint address now.
(gdb) infobreakpoints
Undefined command: "infobreakpoints".  Try "help".
(gdb) info breakpoints
No breakpoints or watchpoints.
(gdb) break expolde_bomb
Function "expolde_bomb" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) break explode_bomb
Breakpoint 1 at 0x401712
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) break *0x401179
Breakpoint 2 at 0x401179
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
asd

Breakpoint 2, 0x0000000000401179 in phase_4 ()
(gdb) info registers
rax            0x0	0
rbx            0x7fffffffe5c8	140737488348616
rcx            0x7fffffffe4c4	140737488348356
rdx            0x7fffffffe4c0	140737488348352
rsi            0x402a0d	4205069
rdi            0x6048b0	6310064
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4c0	0x7fffffffe4c0
r8             0x606164	6316388
r9             0x7ffff7fe8700	140737354041088
r10            0x606150	6316368
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401179	0x401179 <phase_4+33>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
=> 0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) print *(char*) 0x402a0d
$1 = 37 '%'
(gdb) print *(char*) (0x402a0d+1)
$2 = 100 'd'
(gdb) print *(char*) (0x402a0d+2)
$3 = 32 ' '
(gdb) print *(char*) (0x402a0d+3)
$4 = 37 '%'
(gdb) print *(char*) (0x402a0d+4)
$5 = 100 'd'
(gdb) print *(char*) (0x402a0d+5)
$6 = 0 '\000'
(gdb) info registers
rax            0x0	0
rbx            0x7fffffffe5c8	140737488348616
rcx            0x7fffffffe4c4	140737488348356
rdx            0x7fffffffe4c0	140737488348352
rsi            0x402a0d	4205069
rdi            0x6048b0	6310064
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4c0	0x7fffffffe4c0
r8             0x606164	6316388
r9             0x7ffff7fe8700	140737354041088
r10            0x606150	6316368
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401179	0x401179 <phase_4+33>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 2, 0x0000000000401179 in phase_4 ()
(gdb) stepi
0x0000000000400c40 in __isoc99_sscanf@plt ()
(gdb) stepi
__isoc99_sscanf (s=0x6048b0 <input_strings+240> "123 234", 
    format=0x402a0d "%d %d") at isoc99_sscanf.c:26
26	isoc99_sscanf.c: No such file or directory.
(gdb) disas
Dump of assembler code for function __isoc99_sscanf:
=> 0x00007ffff7a79ad0 <+0>:	sub    $0xd8,%rsp
   0x00007ffff7a79ad7 <+7>:	test   %al,%al
   0x00007ffff7a79ad9 <+9>:	mov    %rdx,0x30(%rsp)
   0x00007ffff7a79ade <+14>:	mov    %rcx,0x38(%rsp)
   0x00007ffff7a79ae3 <+19>:	mov    %r8,0x40(%rsp)
   0x00007ffff7a79ae8 <+24>:	mov    %r9,0x48(%rsp)
   0x00007ffff7a79aed <+29>:	je     0x7ffff7a79b26 <__isoc99_sscanf+86>
   0x00007ffff7a79aef <+31>:	movaps %xmm0,0x50(%rsp)
   0x00007ffff7a79af4 <+36>:	movaps %xmm1,0x60(%rsp)
   0x00007ffff7a79af9 <+41>:	movaps %xmm2,0x70(%rsp)
   0x00007ffff7a79afe <+46>:	movaps %xmm3,0x80(%rsp)
   0x00007ffff7a79b06 <+54>:	movaps %xmm4,0x90(%rsp)
   0x00007ffff7a79b0e <+62>:	movaps %xmm5,0xa0(%rsp)
   0x00007ffff7a79b16 <+70>:	movaps %xmm6,0xb0(%rsp)
   0x00007ffff7a79b1e <+78>:	movaps %xmm7,0xc0(%rsp)
   0x00007ffff7a79b26 <+86>:	lea    0xe0(%rsp),%rax
   0x00007ffff7a79b2e <+94>:	lea    0x8(%rsp),%rdx
   0x00007ffff7a79b33 <+99>:	mov    %rax,0x10(%rsp)
   0x00007ffff7a79b38 <+104>:	lea    0x20(%rsp),%rax
   0x00007ffff7a79b3d <+109>:	movl   $0x10,0x8(%rsp)
   0x00007ffff7a79b45 <+117>:	movl   $0x30,0xc(%rsp)
   0x00007ffff7a79b4d <+125>:	mov    %rax,0x18(%rsp)
   0x00007ffff7a79b52 <+130>:	callq  0x7ffff7a79b60 <__GI___isoc99_vsscanf>
   0x00007ffff7a79b57 <+135>:	add    $0xd8,%rsp
   0x00007ffff7a79b5e <+142>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x0000000000401179 <phase_4+33>
	breakpoint already hit 1 time
(gdb) delete 2
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) break *0x40117e
Breakpoint 3 at 0x40117e
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 3, 0x000000000040117e in phase_4 ()
(gdb) info registers
rax            0x2	2
rbx            0x7fffffffe5c8	140737488348616
rcx            0x20	32
rdx            0x7fffffffe4c4	140737488348356
rsi            0x0	0
rdi            0x7fffffffde80	140737488346752
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4c0	0x7fffffffe4c0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40117e	0x40117e <phase_4+38>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
=> 0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) print $eax
$7 = 2
(gdb) stepi
0x0000000000401181 in phase_4 ()
(gdb) stepi
0x0000000000401183 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
=> 0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) print *(int*) $rsp
$8 = 123
(gdb) print *(int*) ($rsp+4)
$9 = 234
(gdb) stepi
0x0000000000401187 in phase_4 ()
(gdb) stepi
0x0000000000401189 in phase_4 ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 3, 0x000000000040117e in phase_4 ()
(gdb) stepi
0x0000000000401181 in phase_4 ()
(gdb) stepi
0x0000000000401183 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
=> 0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) stepi
0x0000000000401187 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
=> 0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) stepi
0x000000000040118e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
=> 0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) stepi
0x0000000000401193 in phase_4 ()
(gdb) stepi
0x0000000000401198 in phase_4 ()
(gdb) stepi
0x000000000040119b in phase_4 ()
(gdb) info registers
rax            0x2	2
rbx            0x7fffffffe5c8	140737488348616
rcx            0x20	32
rdx            0xe	14
rsi            0x0	0
rdi            0xa	10
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4c0	0x7fffffffe4c0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40119b	0x40119b <phase_4+67>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas func4
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) stepi
0x000000000040111a in func4 ()
(gdb) stepi
0x000000000040111e in func4 ()
(gdb) stepi
0x0000000000401120 in func4 ()
(gdb) stepi
0x0000000000401122 in func4 ()
(gdb) stepi
0x0000000000401124 in func4 ()
(gdb) stepi
0x0000000000401127 in func4 ()
(gdb) stepi
0x0000000000401129 in func4 ()
(gdb) info registers
rax            0xe	14
rbx            0x7fffffffe5c8	140737488348616
rcx            0x0	0
rdx            0xe	14
rsi            0x0	0
rdi            0xa	10
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401129	0x401129 <func4+15>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
=> 0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) st
start     step      stepi     stepping  stop      strace    
(gdb) stepi
0x000000000040112b in func4 ()
(gdb) stepi
0x000000000040112e in func4 ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 3, 0x000000000040117e in phase_4 ()
(gdb) continue
Continuing.

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x000000000040117e <phase_4+38>
	breakpoint already hit 1 time
(gdb) delete 3
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) break *0x4011a0
Breakpoint 4 at 0x4011a0
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
4       breakpoint     keep y   0x00000000004011a0 <phase_4+72>
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 4, 0x00000000004011a0 in phase_4 ()
(gdb) info registers
rax            0x2	2
rbx            0x7fffffffe5c8	140737488348616
rcx            0x4	4
rdx            0x4	4
rsi            0x4	4
rdi            0x4	4
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4c0	0x7fffffffe4c0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011a0	0x4011a0 <phase_4+72>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
=> 0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) disas func4
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) break func4
Breakpoint 5 at 0x40111a
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 5, 0x000000000040111a in func4 ()
(gdb) stepi
0x000000000040111e in func4 ()
(gdb) stepi
0x0000000000401120 in func4 ()
(gdb) stepi
0x0000000000401122 in func4 ()
(gdb) stepi
0x0000000000401124 in func4 ()
(gdb) stepi
0x0000000000401127 in func4 ()
(gdb) info registers
rax            0xe	14
rbx            0x7fffffffe5c8	140737488348616
rcx            0x0	0
rdx            0xe	14
rsi            0x0	0
rdi            0x4	4
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401127	0x401127 <func4+13>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
=> 0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
=> 0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) info registers
rax            0xe	14
rbx            0x7fffffffe5c8	140737488348616
rcx            0x0	0
rdx            0xe	14
rsi            0x0	0
rdi            0x4	4
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401127	0x401127 <func4+13>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
=> 0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) stepi
0x0000000000401129 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
=> 0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) stepi
0x000000000040112b in func4 ()
(gdb) info registers
rax            0x7	7
rbx            0x7fffffffe5c8	140737488348616
rcx            0x0	0
rdx            0xe	14
rsi            0x0	0
rdi            0x4	4
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40112b	0x40112b <func4+17>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x000000000040112e in func4 ()
(gdb) stepi
0x0000000000401130 in func4 ()
(gdb) stepi
0x0000000000401132 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
=> 0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) info registers
rax            0x7	7
rbx            0x7fffffffe5c8	140737488348616
rcx            0x7	7
rdx            0xe	14
rsi            0x0	0
rdi            0x4	4
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b0	0x7fffffffe4b0
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401132	0x401132 <func4+24>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
4       breakpoint     keep y   0x00000000004011a0 <phase_4+72>
5       breakpoint     keep y   0x000000000040111a <func4>
	breakpoint already hit 1 time
(gdb) run keys.txt
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 5, 0x000000000040111a in func4 ()
(gdb) continue
Continuing.

Breakpoint 5, 0x000000000040111a in func4 ()
(gdb) continue
Continuing.

Breakpoint 5, 0x000000000040111a in func4 ()
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
4       breakpoint     keep y   0x00000000004011a0 <phase_4+72>
5       breakpoint     keep y   0x000000000040111a <func4>
	breakpoint already hit 3 times
(gdb) delete 5
(gdb) continue
Continuing.

Breakpoint 4, 0x00000000004011a0 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
=> 0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) continue
Continuing.

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) disas
Dump of assembler code for function explode_bomb:
=> 0x0000000000401712 <+0>:	sub    $0x8,%rsp
   0x0000000000401716 <+4>:	mov    $0x4029e1,%edi
   0x000000000040171b <+9>:	callq  0x400b70 <puts@plt>
   0x0000000000401720 <+14>:	mov    $0x4029ea,%edi
   0x0000000000401725 <+19>:	callq  0x400b70 <puts@plt>
   0x000000000040172a <+24>:	mov    $0x0,%edi
   0x000000000040172f <+29>:	callq  0x401608 <send_msg>
   0x0000000000401734 <+34>:	mov    $0x402890,%edi
   0x0000000000401739 <+39>:	callq  0x400b70 <puts@plt>
   0x000000000040173e <+44>:	mov    $0x8,%edi
   0x0000000000401743 <+49>:	callq  0x400c80 <exit@plt>
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 4, 0x00000000004011a0 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
=> 0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) stepi
0x00000000004011a3 in phase_4 ()
(gdb) print $eax
$10 = 2
(gdb) disas func4
Dump of assembler code for function func4:
   0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) break func4
Breakpoint 6 at 0x40111a
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 6, 0x000000000040111a in func4 ()
(gdb) info registers
rax            0x2	2
rbx            0x7fffffffe5c8	140737488348616
rcx            0x20	32
rdx            0xe	14
rsi            0x0	0
rdi            0x5	5
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4b8	0x7fffffffe4b8
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40111a	0x40111a <func4>
eflags         0x293	[ CF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) continue
Continuing.

Breakpoint 6, 0x000000000040111a in func4 ()
(gdb) info registers
rax            0x7	7
rbx            0x7fffffffe5c8	140737488348616
rcx            0x7	7
rdx            0x6	6
rsi            0x0	0
rdi            0x5	5
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4a8	0x7fffffffe4a8
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40111a	0x40111a <func4>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function func4:
=> 0x000000000040111a <+0>:	sub    $0x8,%rsp
   0x000000000040111e <+4>:	mov    %edx,%eax
   0x0000000000401120 <+6>:	sub    %esi,%eax
   0x0000000000401122 <+8>:	mov    %eax,%ecx
   0x0000000000401124 <+10>:	shr    $0x1f,%ecx
   0x0000000000401127 <+13>:	add    %ecx,%eax
   0x0000000000401129 <+15>:	sar    %eax
   0x000000000040112b <+17>:	lea    (%rax,%rsi,1),%ecx
   0x000000000040112e <+20>:	cmp    %edi,%ecx
   0x0000000000401130 <+22>:	jle    0x40113e <func4+36>
   0x0000000000401132 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000401135 <+27>:	callq  0x40111a <func4>
   0x000000000040113a <+32>:	add    %eax,%eax
   0x000000000040113c <+34>:	jmp    0x401153 <func4+57>
   0x000000000040113e <+36>:	mov    $0x0,%eax
   0x0000000000401143 <+41>:	cmp    %edi,%ecx
   0x0000000000401145 <+43>:	jge    0x401153 <func4+57>
   0x0000000000401147 <+45>:	lea    0x1(%rcx),%esi
   0x000000000040114a <+48>:	callq  0x40111a <func4>
   0x000000000040114f <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401153 <+57>:	add    $0x8,%rsp
   0x0000000000401157 <+61>:	retq   
End of assembler dump.
(gdb) continue
Continuing.

Breakpoint 6, 0x000000000040111a in func4 ()
(gdb) info registers
rax            0x0	0
rbx            0x7fffffffe5c8	140737488348616
rcx            0x3	3
rdx            0x6	6
rsi            0x4	4
rdi            0x5	5
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe498	0x7fffffffe498
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x7ffff7b84a00	140737349437952
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x40111a	0x40111a <func4>
eflags         0x293	[ CF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpo
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
4       breakpoint     keep y   0x00000000004011a0 <phase_4+72>
6       breakpoint     keep y   0x000000000040111a <func4>
	breakpoint already hit 3 times
(gdb) delete 4 6
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
2 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
3 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
4 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x0000000000401158 <+0>:	sub    $0x18,%rsp
   0x000000000040115c <+4>:	mov    %fs:0x28,%rax
   0x0000000000401165 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040116a <+18>:	xor    %eax,%eax
   0x000000000040116c <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401171 <+25>:	mov    %rsp,%rdx
   0x0000000000401174 <+28>:	mov    $0x402a0d,%esi
   0x0000000000401179 <+33>:	callq  0x400c40 <__isoc99_sscanf@plt>
   0x000000000040117e <+38>:	cmp    $0x2,%eax
   0x0000000000401181 <+41>:	jne    0x401189 <phase_4+49>
   0x0000000000401183 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401187 <+47>:	jbe    0x40118e <phase_4+54>
   0x0000000000401189 <+49>:	callq  0x401712 <explode_bomb>
   0x000000000040118e <+54>:	mov    $0xe,%edx
   0x0000000000401193 <+59>:	mov    $0x0,%esi
   0x0000000000401198 <+64>:	mov    (%rsp),%edi
   0x000000000040119b <+67>:	callq  0x40111a <func4>
   0x00000000004011a0 <+72>:	cmp    $0x5,%eax
   0x00000000004011a3 <+75>:	jne    0x4011ac <phase_4+84>
   0x00000000004011a5 <+77>:	cmpl   $0x5,0x4(%rsp)
   0x00000000004011aa <+82>:	je     0x4011b1 <phase_4+89>
   0x00000000004011ac <+84>:	callq  0x401712 <explode_bomb>
   0x00000000004011b1 <+89>:	mov    0x8(%rsp),%rax
   0x00000000004011b6 <+94>:	xor    %fs:0x28,%rax
   0x00000000004011bf <+103>:	je     0x4011c6 <phase_4+110>
   0x00000000004011c1 <+105>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x00000000004011c6 <+110>:	add    $0x18,%rsp
   0x00000000004011ca <+114>:	retq   
End of assembler dump.
(gdb) break *0x4011a5
Breakpoint 7 at 0x4011a5
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
7       breakpoint     keep y   0x00000000004011a5 <phase_4+77>
(gdb) kill
The program is not being run.
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
2 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
3 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
4 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
5 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
7 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
8 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
9 5

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 5

Breakpoint 7, 0x00000000004011a5 in phase_4 ()
(gdb) continue
Continuing.
So you got that one.  Try this one.
ass

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run 
README    bomb      bomb.c    keys.txt  
(gdb) kill
The program is not being run.
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

Breakpoint 7, 0x00000000004011a5 in phase_4 ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) quit
2013011717@cereal:~/bomb45$ gdb bomb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) break explode_bomb
Breakpoint 1 at 0x401712
(gdb) disas phase_5
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) break phase_5
Breakpoint 2 at 0x4011cb
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.

Breakpoint 2, 0x00000000004011cb in phase_5 ()
(gdb) stepi
0x00000000004011cc in phase_5 ()
(gdb) break *0x4011d4
Breakpoint 3 at 0x4011d4
(gdb) continue
Continuing.

Breakpoint 3, 0x00000000004011d4 in phase_5 ()
(gdb) info registers
rax            0x4	4
rbx            0x604900	6310144
rcx            0x4	4
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604904	6310148
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1a	6319898
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011d4	0x4011d4 <phase_5+9>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
=> 0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) continue
Continuing.

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.

Breakpoint 2, 0x00000000004011cb in phase_5 ()
(gdb) continue
Continuing.

Breakpoint 3, 0x00000000004011d4 in phase_5 ()
(gdb)  info registers
rax            0x6	6
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011d4	0x4011d4 <phase_5+9>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) kill
Kill the program being debugged? (y or n) n
Not confirmed.
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
=> 0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x6	6
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011d4	0x4011d4 <phase_5+9>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x00000000004011d7 in phase_5 ()
(gdb) stepi
0x00000000004011de in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
=> 0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x6	6
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011de	0x4011de <phase_5+19>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x00000000004011e1 in phase_5 ()
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011e1	0x4011e1 <phase_5+22>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
=> 0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011e1	0x4011e1 <phase_5+22>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x00000000004011e5 in phase_5 ()
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x6	6
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011e5	0x4011e5 <phase_5+26>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
=> 0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) stepi
0x00000000004011ea in phase_5 ()
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x0	0
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011ea	0x4011ea <phase_5+31>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
=> 0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x0	0
rdx            0x604900	6310144
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011ea	0x4011ea <phase_5+31>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) print 89INT80 $rax
Invalid number "89INT80".
(gdb) print *(int*) $rax
$1 = 1634039665
(gdb) print *(char*) $rax
$2 = 113 'q'
(gdb) print *(char*) ($rax+1)
$3 = 119 'w'
(gdb) print *(char*) ($rax+2)
$4 = 101 'e'
(gdb) print *(char*) ($rax+3)
$5 = 97 'a'
(gdb) print *(char*) ($rax+4)
$6 = 115 's'
(gdb) print *(char*) ($rax+5)
$7 = 99 'c'
(gdb) print *(char*) ($rax+6)
$8 = 0 '\000'
(gdb) stepi
0x00000000004011ed in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
=> 0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x0	0
rdx            0x71	113
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011ed	0x4011ed <phase_5+34>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x00000000004011cb <phase_5>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x00000000004011d4 <phase_5+9>
	breakpoint already hit 1 time
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
=> 0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) print $edx
$9 = 113
(gdb) print (char)$edx
$10 = 113 'q'
(gdb) stepi
0x00000000004011f0 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
=> 0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0x0	0
rdx            0x1	1
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011f0	0x4011f0 <phase_5+37>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) print /t $10
$11 = 1110001
(gdb) print /x $10
$12 = 0x71
(gdb) stepi
0x00000000004011f7 in phase_5 ()
(gdb) info registers 
rax            0x604900	6310144
rbx            0x604900	6310144
rcx            0xa	10
rdx            0x1	1
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011f7	0x4011f7 <phase_5+44>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
=> 0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) stepi
0x00000000004011fb in phase_5 ()
(gdb) stepi
0x00000000004011fe in phase_5 ()
(gdb) info registers 
rax            0x604901	6310145
rbx            0x604900	6310144
rcx            0xa	10
rdx            0x1	1
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x4011fe	0x4011fe <phase_5+51>
eflags         0x293	[ CF AF SF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) stepi
0x00000000004011ea in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
=> 0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
   0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) print /x b1111
No symbol "b1111" in current context.
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
2       breakpoint     keep y   0x00000000004011cb <phase_5>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x00000000004011d4 <phase_5+9>
	breakpoint already hit 1 time
(gdb) delete 2 3
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
(gdb) break *0x401200
Breakpoint 4 at 0x401200
(gdb) continue
Continuing.

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) inf registers 
rax            0x604906	6310150
rbx            0x604900	6310144
rcx            0x29	41
rdx            0x3	3
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606f1c	6319900
r9             0x0	0
r10            0x7ffff7fe8700	140737354041088
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401200	0x401200 <phase_5+53>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
=> 0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
qwease

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) info registers 
rax            0x604906	6310150
rbx            0x604900	6310144
rcx            0x38	56
rdx            0x5	5
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606167	6316391
r9             0x7ffff7fe8700	140737354041088
r10            0x606150	6316368
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401200	0x401200 <phase_5+53>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
aaaaaa

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) info registers 
rax            0x604906	6310150
rbx            0x604900	6310144
rcx            0x3c	60
rdx            0x1	1
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606167	6316391
r9             0x7ffff7fe8700	140737354041088
r10            0x606150	6316368
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401200	0x401200 <phase_5+53>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) print $ecx
$13 = 60
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
abcdef

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) print $ecx
$14 = 54
(gdb) print /x  $ecx
$15 = 0x36
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
=> 0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) kill 
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
qwerty

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) print /x 
$16 = 0x36
(gdb) print /x $ecx
$17 = 0x36
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
=> 0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
4       breakpoint     keep y   0x0000000000401200 <phase_5+53>
	breakpoint already hit 1 time
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt

Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
wdvrjs

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) print /x $rcx
$18 = 0x2d
(gdb) print *(char*) ($rbx)
$19 = 119 'w'
(gdb) print /t *(char*) ($rbx)
$20 = 1110111
(gdb) print /t *(char*) ($rbx+1)
$21 = 1100100
(gdb) print /t *(char*) ($rbx+2)
$22 = 1110110
(gdb) print /t *(char*) ($rbx+3)
$23 = 1110010
(gdb) print /t *(char*) ($rbx+4)
$24 = 1101010
(gdb) print /t *(char*) ($rbx+5)
$25 = 1110011
(gdb) print *(int*) ($rdx)
Cannot access memory at address 0x3
(gdb) print *(int*) (0x402780+$rdx)
$26 = 2560
(gdb) print /x *(int*) (0x402780+$rdx)
$27 = 0xa00
(gdb) print /x *(int*) (0x402780)
$28 = 0x2
(gdb) print /x *(int*) (0x402780+1)
$29 = 0xa000000
(gdb) print /x *(int*) (0x402780+4)
$30 = 0xa
(gdb) print /x *(int*) (0x402780+8)
$31 = 0x6
(gdb) print /x *(int*) (0x402780+0xc)
$32 = 0x1
(gdb) print /x *(int*) (0x402780+0x10)
$33 = 0xc
(gdb) print /x *(int*) (0x402780+0x14)
$34 = 0x10
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Zaccde

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) print /x $rcx
$35 = 0x36
(gdb) info registers 
rax            0x604906	6310150
rbx            0x604900	6310144
rcx            0x36	54
rdx            0x5	5
rsi            0x4	4
rdi            0x604906	6310150
rbp            0x4024f0	0x4024f0 <__libc_csu_init>
rsp            0x7fffffffe4d0	0x7fffffffe4d0
r8             0x606167	6316391
r9             0x7ffff7fe8700	140737354041088
r10            0x606150	6316368
r11            0x246	582
r12            0x400d00	4197632
r13            0x7fffffffe5c0	140737488348608
r14            0x0	0
r15            0x0	0
rip            0x401200	0x401200 <phase_5+53>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) disas
Dump of assembler code for function phase_5:
   0x00000000004011cb <+0>:	push   %rbx
   0x00000000004011cc <+1>:	mov    %rdi,%rbx
   0x00000000004011cf <+4>:	callq  0x401420 <string_length>
   0x00000000004011d4 <+9>:	cmp    $0x6,%eax
   0x00000000004011d7 <+12>:	je     0x4011de <phase_5+19>
   0x00000000004011d9 <+14>:	callq  0x401712 <explode_bomb>
   0x00000000004011de <+19>:	mov    %rbx,%rax
   0x00000000004011e1 <+22>:	lea    0x6(%rbx),%rdi
   0x00000000004011e5 <+26>:	mov    $0x0,%ecx
   0x00000000004011ea <+31>:	movzbl (%rax),%edx
   0x00000000004011ed <+34>:	and    $0xf,%edx
   0x00000000004011f0 <+37>:	add    0x402780(,%rdx,4),%ecx
   0x00000000004011f7 <+44>:	add    $0x1,%rax
   0x00000000004011fb <+48>:	cmp    %rdi,%rax
   0x00000000004011fe <+51>:	jne    0x4011ea <phase_5+31>
=> 0x0000000000401200 <+53>:	cmp    $0x2e,%ecx
   0x0000000000401203 <+56>:	je     0x40120a <phase_5+63>
   0x0000000000401205 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040120a <+63>:	pop    %rbx
   0x000000000040120b <+64>:	retq   
End of assembler dump.
(gdb) print /t *(char*) ($rbx)
$36 = 1011010
(gdb) print /t *(char*) ($rbx+1)
$37 = 1100001
(gdb) print /t *(char*) ($rbx+1)-1
$38 = 1100000
(gdb) print *(char*) ($rbx+1)-1
$39 = 96
(gdb) print char (*(char*) ($rbx+1)-1)
A syntax error in expression, near `$rbx+1)-1)'.
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
`accee

Breakpoint 4, 0x0000000000401200 in phase_5 ()
(gdb) print /x $rcx
$40 = 0x2e
(gdb) continue
Continuing.
Good work!  On to the next...
asd

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
4       breakpoint     keep y   0x0000000000401200 <phase_5+53>
	breakpoint already hit 1 time
(gdb) delete 4
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000401712 <explode_bomb>
	breakpoint already hit 1 time
(gdb) run keys.txt 
Starting program: /home/2013011717/bomb45/bomb keys.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Good work!  On to the next...
hahahaha

Breakpoint 1, 0x0000000000401712 in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) disas phase_6
Dump of assembler code for function phase_6:
   0x000000000040120c <+0>:	push   %r13
   0x000000000040120e <+2>:	push   %r12
   0x0000000000401210 <+4>:	push   %rbp
   0x0000000000401211 <+5>:	push   %rbx
   0x0000000000401212 <+6>:	sub    $0x68,%rsp
   0x0000000000401216 <+10>:	mov    %fs:0x28,%rax
   0x000000000040121f <+19>:	mov    %rax,0x58(%rsp)
   0x0000000000401224 <+24>:	xor    %eax,%eax
   0x0000000000401226 <+26>:	mov    %rsp,%rsi
   0x0000000000401229 <+29>:	callq  0x401748 <read_six_numbers>
   0x000000000040122e <+34>:	mov    %rsp,%r12
   0x0000000000401231 <+37>:	mov    $0x0,%r13d
   0x0000000000401237 <+43>:	mov    %r12,%rbp
   0x000000000040123a <+46>:	mov    (%r12),%eax
   0x000000000040123e <+50>:	sub    $0x1,%eax
   0x0000000000401241 <+53>:	cmp    $0x5,%eax
   0x0000000000401244 <+56>:	jbe    0x40124b <phase_6+63>
   0x0000000000401246 <+58>:	callq  0x401712 <explode_bomb>
   0x000000000040124b <+63>:	add    $0x1,%r13d
   0x000000000040124f <+67>:	cmp    $0x6,%r13d
   0x0000000000401253 <+71>:	je     0x401292 <phase_6+134>
   0x0000000000401255 <+73>:	mov    %r13d,%ebx
   0x0000000000401258 <+76>:	movslq %ebx,%rax
   0x000000000040125b <+79>:	mov    (%rsp,%rax,4),%eax
   0x000000000040125e <+82>:	cmp    %eax,0x0(%rbp)
   0x0000000000401261 <+85>:	jne    0x401268 <phase_6+92>
   0x0000000000401263 <+87>:	callq  0x401712 <explode_bomb>
   0x0000000000401268 <+92>:	add    $0x1,%ebx
   0x000000000040126b <+95>:	cmp    $0x5,%ebx
   0x000000000040126e <+98>:	jle    0x401258 <phase_6+76>
   0x0000000000401270 <+100>:	add    $0x4,%r12
   0x0000000000401274 <+104>:	jmp    0x401237 <phase_6+43>
   0x0000000000401276 <+106>:	mov    0x8(%rdx),%rdx
   0x000000000040127a <+110>:	add    $0x1,%eax
   0x000000000040127d <+113>:	cmp    %ecx,%eax
   0x000000000040127f <+115>:	jne    0x401276 <phase_6+106>
   0x0000000000401281 <+117>:	mov    %rdx,0x20(%rsp,%rsi,2)
   0x0000000000401286 <+122>:	add    $0x4,%rsi
   0x000000000040128a <+126>:	cmp    $0x18,%rsi
   0x000000000040128e <+130>:	jne    0x401297 <phase_6+139>
   0x0000000000401290 <+132>:	jmp    0x4012ab <phase_6+159>
   0x0000000000401292 <+134>:	mov    $0x0,%esi
   0x0000000000401297 <+139>:	mov    (%rsp,%rsi,1),%ecx
   0x000000000040129a <+142>:	mov    $0x1,%eax
   0x000000000040129f <+147>:	mov    $0x6042f0,%edx
   0x00000000004012a4 <+152>:	cmp    $0x1,%ecx
   0x00000000004012a7 <+155>:	jg     0x401276 <phase_6+106>
   0x00000000004012a9 <+157>:	jmp    0x401281 <phase_6+117>
   0x00000000004012ab <+159>:	mov    0x20(%rsp),%rbx
   0x00000000004012b0 <+164>:	lea    0x20(%rsp),%rax
   0x00000000004012b5 <+169>:	lea    0x48(%rsp),%rsi
   0x00000000004012ba <+174>:	mov    %rbx,%rcx
   0x00000000004012bd <+177>:	mov    0x8(%rax),%rdx
---Type <return> to continue, or q <return> to quit---
   0x00000000004012c1 <+181>:	mov    %rdx,0x8(%rcx)
   0x00000000004012c5 <+185>:	add    $0x8,%rax
   0x00000000004012c9 <+189>:	mov    %rdx,%rcx
   0x00000000004012cc <+192>:	cmp    %rsi,%rax
   0x00000000004012cf <+195>:	jne    0x4012bd <phase_6+177>
   0x00000000004012d1 <+197>:	movq   $0x0,0x8(%rdx)
   0x00000000004012d9 <+205>:	mov    $0x5,%ebp
   0x00000000004012de <+210>:	mov    0x8(%rbx),%rax
   0x00000000004012e2 <+214>:	mov    (%rax),%eax
   0x00000000004012e4 <+216>:	cmp    %eax,(%rbx)
   0x00000000004012e6 <+218>:	jle    0x4012ed <phase_6+225>
   0x00000000004012e8 <+220>:	callq  0x401712 <explode_bomb>
   0x00000000004012ed <+225>:	mov    0x8(%rbx),%rbx
   0x00000000004012f1 <+229>:	sub    $0x1,%ebp
   0x00000000004012f4 <+232>:	jne    0x4012de <phase_6+210>
   0x00000000004012f6 <+234>:	mov    0x58(%rsp),%rax
   0x00000000004012fb <+239>:	xor    %fs:0x28,%rax
   0x0000000000401304 <+248>:	je     0x40130b <phase_6+255>
   0x0000000000401306 <+250>:	callq  0x400b90 <__stack_chk_fail@plt>
   0x000000000040130b <+255>:	add    $0x68,%rsp
   0x000000000040130f <+259>:	pop    %rbx
   0x0000000000401310 <+260>:	pop    %rbp
   0x0000000000401311 <+261>:	pop    %r12
   0x0000000000401313 <+263>:	pop    %r13
   0x0000000000401315 <+265>:	retq   
End of assembler dump.
(gdb) 

